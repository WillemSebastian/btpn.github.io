{"version":3,"sources":["components/modal.js","components/contact.js","views/home.js","App.js","serviceWorker.js","index.js"],"names":["Modal","props","React","useState","status","data","firstName","changeFirstName","lastName","changeLastName","age","changeAge","photo","changePhoto","submit","a","form","fetch","mode","method","body","JSON","stringify","setAlertMessage","openSuccessAlert","getContact","openFailAlert","url","id","handleClose","Dialog","open","isModalOpen","onClose","aria-labelledby","DialogTitle","DialogContent","TextField","autoFocus","margin","label","type","fullWidth","onChange","e","target","value","DialogActions","Button","onClick","color","Contact","setOpen","handleClickOpen","item","header","Accept","ContentType","response","json","message","List","ListItem","alignItems","ListItemAvatar","Avatar","alt","src","ListItemText","primary","secondary","Fragment","Typography","component","variant","ListItemSecondaryAction","IconButton","edge","aria-label","deleteContact","Divider","Alert","elevation","Home","componentDidMount","setState","text","alertMessage","successAlertOpen","failAlertOpen","renderContactList","state","length","map","_","key","className","Icon","style","fontSize","cursor","this","Snackbar","autoHideDuration","severity","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.728727a9.chunk.js","sourcesContent":["import React from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport Button from \"@material-ui/core/Button\";\n\nexport default function Modal(props) {\n  const [firstName, changeFirstName] = React.useState(\n    props.status === \"edit\" ? props.data.firstName : \"\"\n  );\n  const [lastName, changeLastName] = React.useState(\n    props.status === \"edit\" ? props.data.lastName : \"\"\n  );\n  const [age, changeAge] = React.useState(\n    props.status === \"edit\" ? props.data.age : \"\"\n  );\n  const [photo, changePhoto] = React.useState(\n    props.status === \"edit\" ? props.data.photo : \"\"\n  );\n  const submit = async () => {\n    var form = {\n      firstName: firstName,\n      lastName: lastName,\n      age: age,\n      photo: photo\n    };\n\n    if (props.status === \"add\") {\n      const url = \"https://simple-contact-crud.herokuapp.com/contact\";\n      const response = await fetch(url, {\n        mode: \"no-cors\",\n        method: \"POST\",\n        body: JSON.stringify(form)\n      });\n      if (response.status === 201) {\n        props.setAlertMessage(\"Success create contact\");\n        props.openSuccessAlert();\n        props.getContact();\n      } else {\n        props.setAlertMessage(\"Fail create contact\");\n        props.openFailAlert();\n      }\n    } else {\n      const url =\n        \"https://simple-contact-crud.herokuapp.com/contact/\" + props.data.id;\n      const response = await fetch(url, {\n        method: \"PUT\",\n        body: JSON.stringify(form)\n      });\n      if (response.status === 201) {\n        props.setAlertMessage(\"Success edit contact\");\n        props.openSuccessAlert();\n        props.getContact();\n      } else {\n        props.setAlertMessage(\"Fail edit contact\");\n        props.openFailAlert();\n      }\n    }\n    props.handleClose();\n  };\n\n  return (\n    <Dialog\n      open={props.isModalOpen}\n      onClose={props.handleClose}\n      aria-labelledby=\"form-dialog-title\"\n    >\n      <DialogTitle id=\"form-dialog-title\">Add Contact</DialogTitle>\n      <DialogContent>\n        <TextField\n          autoFocus\n          margin=\"dense\"\n          id=\"firstName\"\n          label=\"First Name\"\n          type=\"text\"\n          fullWidth\n          onChange={e => changeFirstName(e.target.value)}\n          value={firstName}\n        />\n        <TextField\n          margin=\"dense\"\n          id=\"lastName\"\n          label=\"Last Name\"\n          type=\"text\"\n          fullWidth\n          onChange={e => changeLastName(e.target.value)}\n          value={lastName}\n        />\n        <TextField\n          margin=\"dense\"\n          id=\"age\"\n          label=\"Age\"\n          type=\"number\"\n          fullWidth\n          onChange={e => changeAge(e.target.value)}\n          value={age}\n        />\n        <TextField\n          margin=\"dense\"\n          id=\"photo\"\n          label=\"Photo\"\n          type=\"text\"\n          fullWidth\n          onChange={e => changePhoto(e.target.value)}\n          value={photo}\n        />\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={submit} color=\"primary\">\n          Submit\n        </Button>\n        <Button onClick={props.handleClose} color=\"primary\">\n          Cancel\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n}\n","import React from \"react\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport Divider from \"@material-ui/core/Divider\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport ListItemAvatar from \"@material-ui/core/ListItemAvatar\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Modal from \"../components/modal\";\n\nfunction Contact(props) {\n  const [open, setOpen] = React.useState(false);\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  async function deleteContact() {\n    const url =\n      \"https://simple-contact-crud.herokuapp.com/contact/\" + props.item.id;\n    const response = await fetch(url, {\n      method: \"DELETE\",\n      header: {\n        Accept: \"Application/json\",\n        ContentType: \"Application/json\"\n      }\n    });\n    const data = await response.json();\n    if (response.status === 201) {\n      props.setAlertMessage(\"Success delete contact\");\n      props.openSuccessAlert();\n      props.getContact();\n    } else {\n      props.setAlertMessage(data.message);\n      props.openFailAlert();\n    }\n  }\n\n  return (\n    <List>\n      <ListItem alignItems=\"flex-start\">\n        <ListItemAvatar>\n          <Avatar alt=\"Remy Sharp\" src={props.item.photo} />\n        </ListItemAvatar>\n        <ListItemText\n          primary={props.item.firstName + \" \" + props.item.lastName}\n          secondary={\n            <React.Fragment>\n              <Typography component=\"span\" variant=\"body2\" color=\"textPrimary\">\n                Age: {props.item.age}\n              </Typography>\n            </React.Fragment>\n          }\n        />\n        <ListItemSecondaryAction>\n          <IconButton\n            edge=\"end\"\n            aria-label=\"delete\"\n            onClick={() => handleClickOpen()}\n          >\n            <EditIcon />\n          </IconButton>\n          <IconButton\n            edge=\"end\"\n            aria-label=\"delete\"\n            onClick={() => deleteContact()}\n          >\n            <DeleteIcon />\n          </IconButton>\n        </ListItemSecondaryAction>\n      </ListItem>\n      <Divider variant=\"inset\" component=\"li\" />\n      <Modal\n        handleClose={handleClose}\n        handleClickOpen={handleClickOpen}\n        isModalOpen={open}\n        openSuccessAlert={props.openSuccessAlert}\n        openFailAlert={props.openFailAlert}\n        setAlertMessage={props.setAlertMessage}\n        getContact={props.getContact}\n        status=\"edit\"\n        data={props.item}\n      />\n    </List>\n  );\n}\n\nexport default Contact;\n","import React from \"react\";\nimport Contact from \"../components/contact\";\nimport Icon from \"@material-ui/core/Icon\";\nimport Modal from \"../components/modal\";\nimport Snackbar from \"@material-ui/core/Snackbar\";\nimport MuiAlert from \"@material-ui/lab/Alert\";\n\nfunction Alert(props) {\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\nexport default class Home extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: [],\n      isModalOpen: false,\n      successAlertOpen: false,\n      alertMessage: \"true\",\n      failAlertOpen: false\n    };\n  }\n\n  componentDidMount = () => {\n    this.getContact();\n  };\n\n  handleClickOpen = () => {\n    this.setState({ isModalOpen: true });\n  };\n\n  handleClose = () => {\n    this.setState({ isModalOpen: false });\n  };\n\n  setAlertMessage = text => {\n    this.setState({ alertMessage: text });\n  };\n\n  openSuccessAlert = () => {\n    this.setState({ successAlertOpen: true });\n  };\n\n  openFailAlert = () => {\n    this.setState({ failAlertOpen: true });\n  };\n\n  getContact = async () => {\n    const url = \"https://simple-contact-crud.herokuapp.com/contact\";\n    const response = await fetch(url, {\n      method: \"GET\"\n    });\n    const data = await response.json();\n    this.setState({ data: data.data });\n  };\n\n  renderContactList = () => {\n    return this.state.data.length\n      ? this.state.data.map(_ => {\n          return (\n            <Contact\n              item={_}\n              key={_.id}\n              openSuccessAlert={this.openSuccessAlert}\n              openFailAlert={this.openFailAlert}\n              setAlertMessage={this.setAlertMessage}\n              getContact={this.getContact}\n            />\n          );\n        })\n      : null;\n  };\n\n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"content\">\n          <div className=\"headerContactList\">\n            <div>&nbsp;</div>\n            <div>Contact List</div>\n            <Icon\n              style={{ fontSize: 30, cursor: \"pointer\" }}\n              onClick={this.handleClickOpen}\n            >\n              add_circle\n            </Icon>\n          </div>\n          <div className=\"contactCard\">{this.renderContactList()}</div>\n        </div>\n        <Modal\n          handleClose={this.handleClose}\n          handleClickOpen={this.handleClickOpen}\n          isModalOpen={this.state.isModalOpen}\n          status=\"add\"\n          openSuccessAlert={this.openSuccessAlert}\n          openFailAlert={this.openFailAlert}\n          setAlertMessage={this.setAlertMessage}\n          getContact={this.getContact}\n        />\n        <Snackbar open={this.state.successAlertOpen} autoHideDuration={3000}>\n          <Alert severity=\"success\">{this.state.alertMessage}</Alert>\n        </Snackbar>\n        <Snackbar open={this.state.failAlertOpen} autoHideDuration={3000}>\n          <Alert severity=\"error\">{this.state.alertMessage}</Alert>\n        </Snackbar>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport Home from \"./views/home\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App background\">\n      <Home />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}